name: 🚀 Campus Navigation CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Phase 1: Code Quality & Dependency Analysis
  quality-check:
    name: 📋 Code Quality & Dependencies
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      shared-changed: ${{ steps.changes.outputs.shared }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            api:
              - 'packages/api/**'
              - 'packages/shared/**'
            frontend:
              - 'apps/web-app/**'
              - 'packages/shared/**'
            shared:
              - 'packages/shared/**'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔍 Lint all packages
        run: pnpm run lint

      - name: 🔧 Type check all packages
        run: pnpm run type-check

      - name: 📊 Check for security vulnerabilities
        run: pnpm audit --audit-level moderate

  # Phase 2: Backend Testing with Real Database
  backend-tests:
    name: 🧪 Backend Tests (PostgreSQL + PostGIS)
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.api-changed == 'true'
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: campus_navigation_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Setup test database
        run: |
          cd packages/api
          # Apply migrations to test database
          pnpm run db:migrate
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: campus_navigation_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: test_password
          NODE_ENV: test

      - name: 🧪 Run API tests
        run: |
          cd packages/api
          pnpm test
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: campus_navigation_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: test_password
          NODE_ENV: test

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v3
        with:
          file: packages/api/coverage/lcov.info
          flags: backend

  # Phase 3: Frontend Testing & Build
  frontend-tests:
    name: 🎨 Frontend Tests & Build
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.frontend-changed == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🧪 Run frontend tests
        run: |
          cd apps/web-app
          pnpm test

      - name: 🏗️ Build frontend
        run: |
          cd apps/web-app
          pnpm build

      - name: 📦 Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: apps/web-app/dist

  # Phase 4: Integration Testing
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: always() && (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') && (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: campus_navigation_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🗄️ Setup test database
        run: |
          cd packages/api
          pnpm run db:migrate
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: campus_navigation_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: test_password
          NODE_ENV: test

      - name: 🚀 Start API server
        run: |
          cd packages/api
          pnpm build
          pnpm start &
          sleep 10
        env:
          DATABASE_HOST: localhost
          DATABASE_PORT: 5432
          DATABASE_NAME: campus_navigation_test
          DATABASE_USER: postgres
          DATABASE_PASSWORD: test_password
          NODE_ENV: test
          PORT: 3001

      - name: 🧪 Run API health checks
        run: |
          curl -f http://localhost:3001/health
          curl -f http://localhost:3001/health/db

      - name: 📊 Test API endpoints
        run: |
          # Test route calculation with proper error handling
          response=$(curl -s -w "%{http_code}" -X POST http://localhost:3001/api/route \
            -H "Content-Type: application/json" \
            -d '{"startNodeId":"999","endNodeId":"998"}')
          
          # Should return 404 for non-existent route (expected behavior)
          if [[ "${response: -3}" == "404" ]]; then
            echo "✅ Route API correctly handles non-existent routes"
          else
            echo "❌ Route API unexpected response: $response"
            exit 1
          fi

  # Phase 5: Deployment (Production)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: 📥 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build all packages
        run: pnpm build

      - name: 🚀 Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: apps/web-app

      - name: 🚀 Deploy Backend to Railway
        uses: bervProject/railway-deploy@v1.3.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE_ID }}

      - name: 🔔 Notify deployment success
        if: success()
        run: |
          echo "🎉 Deployment successful!"
          echo "Frontend: https://your-app.vercel.app"
          echo "Backend: https://your-api.railway.app"

  # Phase 6: Post-deployment Health Check
  health-check:
    name: 🏥 Post-deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
      - name: 🔍 Check production health
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Check backend health (replace with your actual Railway URL)
          # curl -f https://your-api.railway.app/health
          
          # Check frontend accessibility (replace with your actual Vercel URL)
          # curl -f https://your-app.vercel.app
          
          echo "🏥 Health checks would run here with actual deployment URLs" 