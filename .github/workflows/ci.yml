name: 🚀 Campus Navigation CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # Phase 1: Quality Check (2-3 min)
  quality-check:
    name: 🔍 Quality Check
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend || 'false' }}
      frontend-changed: ${{ steps.changes.outputs.frontend || 'false' }}
      shared-changed: ${{ steps.changes.outputs.shared || 'false' }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'packages/api/**'
              - 'packages/shared/**'
            frontend:
              - 'apps/web-app/**'
              - 'packages/shared/**'
            shared:
              - 'packages/shared/**'

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📚 Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 🗄️ Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH || '~/.pnpm-store' }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 📋 Lint code
        run: pnpm lint

      - name: 🔧 Type check
        run: pnpm type-check

      - name: 🔒 Security audit
        run: pnpm audit --audit-level moderate || echo "Security audit found issues but continuing..."
        continue-on-error: true

      - name: 📊 Discord Notification - Quality Check
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🔍 **Quality Check Complete**
            **Status**: ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
            **Changes**: Backend: ${{ steps.changes.outputs.backend || 'false' }}, Frontend: ${{ steps.changes.outputs.frontend || 'false' }}

  # Phase 2: Backend Tests (5-7 min)
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.backend-changed == 'true' || needs.quality-check.outputs.shared-changed == 'true'
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: campus_navigation_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build shared package
        run: pnpm --filter @campus-nav/shared build

      - name: 🗄️ Setup database schema
        run: pnpm --filter @campus-nav/api db:migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: campus_navigation_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: 🧪 Run backend tests
        run: pnpm --filter @campus-nav/api test
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: campus_navigation_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: 📊 Discord Notification - Backend Tests
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🧪 **Backend Tests Complete**
            **Status**: ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **Database**: PostgreSQL + PostGIS

  # Phase 3: Frontend Tests (3-4 min)
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    needs: quality-check
    if: needs.quality-check.outputs.frontend-changed == 'true' || needs.quality-check.outputs.shared-changed == 'true'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build shared package
        run: pnpm --filter @campus-nav/shared build

      - name: 🏗️ Build frontend
        run: pnpm --filter @campus-nav/web-app build

      - name: 🧪 Run frontend tests
        run: pnpm --filter @campus-nav/web-app test

      - name: 📊 Discord Notification - Frontend Tests
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🎨 **Frontend Tests Complete**
            **Status**: ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **Framework**: React + Vite

  # Phase 4: Integration Tests (4-5 min)
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-check, backend-tests, frontend-tests]
    if: always() && ((needs['backend-tests'].result || 'failure') == 'success' || (needs['backend-tests'].result || 'failure') == 'skipped') && ((needs['frontend-tests'].result || 'failure') == 'success' || (needs['frontend-tests'].result || 'failure') == 'skipped')
    
    services:
      postgres:
        image: postgis/postgis:16-3.4
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: campus_navigation_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🏗️ Build packages
        run: |
          pnpm --filter @campus-nav/shared build
          pnpm --filter @campus-nav/api build

      - name: 🗄️ Setup database schema
        run: pnpm --filter @campus-nav/api db:migrate
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: campus_navigation_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: 🚀 Start API server
        run: |
          cd packages/api
          npm start &
          sleep 10
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: campus_navigation_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: 🧪 Test API endpoints
        run: |
          curl -f http://localhost:3001/health || exit 1
          curl -f http://localhost:3001/health/db || exit 1

      - name: 📊 Discord Notification - Integration Tests
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🔗 **Integration Tests Complete**
            **Status**: ${{ job.status == 'success' && '✅ Passed' || '❌ Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **API Health**: Tested

  # Phase 5: Deployment (3-5 min) - NEW!
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-check, backend-tests, frontend-tests, integration-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' && ((needs['integration-tests'].result || 'failure') == 'success' || ((needs['backend-tests'].result || 'failure') == 'success' && (needs['frontend-tests'].result || 'failure') == 'success'))
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      # Deploy Frontend to Vercel
      - name: 🎨 Deploy Frontend to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./apps/web-app
          vercel-args: '--prod'

      # Deploy Backend to Railway
      - name: 🚂 Deploy Backend to Railway
        uses: bervProject/railway-deploy@main
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        with:
          service: ${{ secrets.RAILWAY_SERVICE_ID }}

      - name: 📊 Discord Notification - Deployment
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🚀 **Deployment Complete**
            **Status**: ${{ job.status == 'success' && '✅ Success' || '❌ Failed' }}
            **Branch**: `${{ github.ref_name }}`
            **Frontend**: Vercel
            **Backend**: Railway
            **Live URL**: https://campus-navigation-frontend-lizi052ai-tanmays-projects-8086dda2.vercel.app

  # Phase 6: Health Check (1-2 min) - NEW!
  health-check:
    name: 🏥 Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: always() && (needs['deploy'].result || 'failure') == 'success'
    
    steps:
      - name: 🏥 Check Frontend Health
        run: |
          sleep 30  # Wait for deployment to propagate
          curl -f https://campus-navigation-frontend-lizi052ai-tanmays-projects-8086dda2.vercel.app || exit 1

      - name: 🏥 Check Backend Health
        run: |
          sleep 30  # Wait for deployment to propagate
          curl -f https://map-navigator-production.up.railway.app/health || exit 1

      - name: 📊 Discord Notification - Health Check
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            🏥 **Health Check Complete**
            **Status**: ${{ job.status == 'success' && '✅ Healthy' || '❌ Issues Detected' }}
            **Frontend**: https://campus-navigation-frontend-lizi052ai-tanmays-projects-8086dda2.vercel.app
            **Backend**: https://map-navigator-production.up.railway.app
            **Ready for use**: ${{ job.status == 'success' && 'Yes' || 'No' }}

  # Final Summary Notification
  pipeline-summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [quality-check, backend-tests, frontend-tests, integration-tests, deploy, health-check]
    if: always()
    
    steps:
      - name: 📊 Discord Notification - Pipeline Summary
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            📋 **CI/CD Pipeline Summary**
            **Overall Status**: ${{ ((needs['quality-check'].result || 'failure') == 'success' && ((needs['backend-tests'].result || 'skipped') == 'success' || (needs['backend-tests'].result || 'skipped') == 'skipped') && ((needs['frontend-tests'].result || 'skipped') == 'success' || (needs['frontend-tests'].result || 'skipped') == 'skipped') && ((needs['integration-tests'].result || 'skipped') == 'success' || (needs['integration-tests'].result || 'skipped') == 'skipped') && ((needs['deploy'].result || 'skipped') == 'success' || (needs['deploy'].result || 'skipped') == 'skipped') && ((needs['health-check'].result || 'skipped') == 'success' || (needs['health-check'].result || 'skipped') == 'skipped')) && '✅ All Systems Go' || '❌ Issues Detected' }}
            
            **Phase Results**:
            🔍 Quality Check: ${{ (needs['quality-check'].result || 'failure') == 'success' && '✅' || '❌' }}
            🧪 Backend Tests: ${{ (needs['backend-tests'].result || 'skipped') == 'success' && '✅' || (needs['backend-tests'].result || 'skipped') == 'skipped' && '⏭️' || '❌' }}
            🎨 Frontend Tests: ${{ (needs['frontend-tests'].result || 'skipped') == 'success' && '✅' || (needs['frontend-tests'].result || 'skipped') == 'skipped' && '⏭️' || '❌' }}
            🔗 Integration: ${{ (needs['integration-tests'].result || 'skipped') == 'success' && '✅' || (needs['integration-tests'].result || 'skipped') == 'skipped' && '⏭️' || '❌' }}
            🚀 Deployment: ${{ (needs['deploy'].result || 'skipped') == 'success' && '✅' || (needs['deploy'].result || 'skipped') == 'skipped' && '⏭️' || '❌' }}
            🏥 Health Check: ${{ (needs['health-check'].result || 'skipped') == 'success' && '✅' || (needs['health-check'].result || 'skipped') == 'skipped' && '⏭️' || '❌' }}
            
            **Branch**: `${{ github.ref_name }}`
            **Commit**: `${{ github.sha }}`
            **Triggered by**: ${{ github.actor }} 